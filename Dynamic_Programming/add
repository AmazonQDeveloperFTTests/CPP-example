//length of the longest palindromic subsequence
#include<bits/stdc++.h>
using namespace std;
int palindromestring(string word){  
	int n= word.size();
	if(n==0) return 0;
int dp[n][n];
	for(int i=0;i<n;i++){
dp[i][i]= 1;
}

for(int i=0;i<n-1;i++){

	if(word[i]==word[i+1]){
  dp[i][i+1]= 2;
}else{
 dp[i][i+1]=1;
}

}


	
	for(int gap= 2;gap<n;gap++){
	for(int i=0;i<n-gap;i++)
	{
		int j= i+gap;
		
		if(word[i]==word[j]){
			dp[i][j]= dp[i+1][j-1]+2;
}
else{
dp[i][j]= max(dp[i+1][j], dp[i][j-1]);
}
}
}

  return dp[0][n-1];
}

int main(){
  string word;
  cin>>word;
  
  cout<< palindromestring(word);
  return 0;
}

